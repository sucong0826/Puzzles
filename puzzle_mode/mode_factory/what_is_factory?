这里我们先来了解，什么是工厂模式？

一.概述
-工厂模式主要为创建对象提供了接口。(说的很概括)

二.分类
-1.简单工厂模式
-2.工厂方法模式
-3.抽象工厂模式

三.使用情况
-1.在编写代码的时候不知道要创建哪种类的实例。
-2.系统不应该依赖于产品的实例如何被创建，组合和表达的细节。

四.简单工厂模式
主要由以下三种角色组成：
-1.工厂类：核心部分。含有一定的商业和判断逻辑。(具体类)
-2.抽象产品：这是具体商品实现的接口或需要继承的父类。(接口/抽象类)
-3.具体产品：工厂类所创建的对象就是此类的实例。(具体类)

简单工厂的优缺点：
优点：
     正如我们所看到的，简单工厂的模式使用于简单的业务，它是轻量级的工厂抽象出来的模式，
     利用简单工厂模式我们可以做到客户不必关心具体产品的生产过程，不必过于关心产品的内部细节，
     这样一来，客户只要提出相应的产品，通过我们提供的具体产品提交到工厂后，就可以生产了。
缺点：
     简单工厂的缺点也显而易见，我们在工厂中的代码可以得知，需要创建很多套具体产品类才能满足
     不同用户提出的不同需求，这对于工厂类的开闭原则是很不利的，因为只要有用户提出新的请求，我们
     就要写出一个的模板进而修改工厂类。耦合性很高这样是不对的。

五.工厂方法模式
-工厂方法模式是简单工厂的一个提升版，它由更抽象的表现形式。
 同时，不再由工厂类决定哪一个商品应该被实例化，把这个决定权交给抽象工厂的子类去决定。

主要由以下4个角色组成：
-1.抽象工厂：工厂方法模式的核心。是具体工厂必须实现的接口或抽象类。(接口/抽象类)
-2.具体工厂：相当于简单工厂模式的工厂类，含具体业务逻辑有关的代码，应该在创建具体的产品的时候调用。(具体类)
-3.抽象产品：同上
-4.具体产品：同上

工厂方法的优缺点：
优点：
     当我们看到工厂方法之后，优点就是每当有一个新的香皂类型产生了之后，我们根本不用修改抽象工厂父类，
     只是单纯的从增加了一个抽象工厂的具体类，让它实现抽象工厂接口之后就可以产生对应的香皂了。这样是满足
     了开闭性的原则。
缺点：
     工厂方法的加入，使得业务中的对象成倍的增加。这是不好的。

六.抽象工厂方法
-我们先来理解一下“产品族”的概念：位于不同产品等级结构中，功能相关联的产品组成的家族。
-抽象工厂方法的用意为给客户端提供一个接口，可以创建多个产品族中的产品对象，
